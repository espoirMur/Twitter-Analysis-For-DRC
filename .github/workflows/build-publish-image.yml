name: Demo Push

on:
  push:
    # Publish `master` as Docker `latest` image. this is the alternative to explore the next time
    branches:
      - master
      - deploy-to-new-server

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: airflow-for-tweets

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: create  docker cache
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/cache
          key: ${{ runner.os }}-docker-${{ hashfiles('cache/**') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build image
        run: |
          docker buildx build \
           -f Dockerfile-Prod \
           --progress=plain \
           --cache-from "type=local,src=$GITHUB_WORKSPACE/cache" \
           --cache-to "type=local,dest=$GITHUB_WORKSPACE/cache" \
           --tag $IMAGE_NAME \
           --label "runnumber=${GITHUB_RUN_ID}" .

      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        id: push-image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          echo "::set-output name=image-name::$IMAGE_ID:$VERSION"
      - name: write the image name to the docker compose --file
        run:
          sed -i '' 's/BASE-IMAGE-NAME/${{ steps.push-image.outputs.image-name }}/g' docker-compose-prod.yml
          cat docker-compose-prod.yml
